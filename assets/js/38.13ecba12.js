(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{656:function(t,a,s){"use strict";s.r(a);var r=s(29),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("基础概念")]),t._v(" "),s("ul",[s("li",[t._v("操作符：也叫运算符，是一种符号。通过操作符可以对一个或多个值进行运算，并获取运算结果")]),t._v(" "),s("li",[t._v("表达式：由数字、运算符、变量的组成的式子，一个表达式往往会产生一个值")])])]),t._v(" "),s("h2",{attrs:{id:"一元操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[t._v("#")]),t._v(" 一元操作符")]),t._v(" "),s("p",[t._v("只操作一个值的操作符叫"),s("code",[t._v("一元操作符")])]),t._v(" "),s("h3",{attrs:{id:"递增-递减操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递增-递减操作符"}},[t._v("#")]),t._v(" 递增/递减操作符")]),t._v(" "),s("p",[t._v("++是递增操作符，表示在自身基础上加 1")]),t._v(" "),s("p",[t._v("a++先用再加，++a 先加再用")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),s("p",[t._v("递减操作符同理，不做赘述")]),t._v(" "),s("p",[t._v("另外，这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。\n递增和递减操作符遵循如下规则：")]),t._v(" "),s("ul",[s("li",[t._v("对于字符串，如果是有效的数值形式，则转换为数值再应用改变。"),s("strong",[t._v("变量类型从字符串变成数值")]),t._v("。")]),t._v(" "),s("li",[t._v("对于字符串，如果不是有效的数值形式，"),s("strong",[t._v("则将变量的值设置为 NaN")]),t._v("。变量类型从字符串变成数值。")]),t._v(" "),s("li",[t._v("对于布尔值，如果是 false，则转换为 0 再应用改变。变量类型从布尔值变成数值。如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。")]),t._v(" "),s("li",[t._v("对于浮点值，加 1 或减 1。")]),t._v(" "),s("li",[t._v("如果是对象，则调用其 valueOf()方法取得可以操作的值。对得到的值应用上述规则。"),s("strong",[t._v("如果是 NaN，则调用 toString()并再次应用其他规则")]),t._v("。"),s("strong",[t._v("变量类型从对象变成数值")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值变成2")]),t._v("\n")])])]),s("h3",{attrs:{id:"一元加和减"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一元加和减"}},[t._v("#")]),t._v(" 一元加和减")]),t._v(" "),s("p",[t._v("一元加由一个加号（+）表示，放在变量前头，对数值没有任何影响")]),t._v(" "),s("p",[s("strong",[t._v("如果将一元加应用到非数值，则会执行与使用 Number()转型函数一样的类型转换：布尔值 false 和 true 转换为 0 和 1，字符串根据特殊规则进行解析，对象会调用它们的 valueOf()和/或 toString()方法以得到可以转换的值。")])]),t._v(" "),s("p",[t._v("一元减由一个减号（-）表示，放在变量前头，主要用于把数值变成负值")]),t._v(" "),s("p",[t._v("在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值")]),t._v(" "),s("p",[t._v("一元加和减操作符主要用于基本的算术，但也可以像上面的例子那样，"),s("strong",[t._v("用于数据类型转换")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"布尔操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔操作符"}},[t._v("#")]),t._v(" 布尔操作符")]),t._v(" "),s("p",[t._v("布尔操作符的优先级是："),s("strong",[t._v("非 → 与 → 或")]),t._v("，而在 js 表达式中的优先级是："),s("strong",[t._v("非 → 数学（乘性，加性）→ 关系 → 布尔")]),t._v("，例如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h3",{attrs:{id:"逻辑非"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[t._v("#")]),t._v(" 逻辑非")]),t._v(" "),s("p",[t._v("逻辑非操作符由一个叹号（"),s("code",[t._v("!")]),t._v("）表示，"),s("strong",[t._v("这个操作符始终返回布尔值，无论应用到的是什么数据类型")]),t._v("。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。\n逻辑非操作符会遵循如下规则：")]),t._v(" "),s("ul",[s("li",[t._v("如果操作数是对象，则返回 false。")]),t._v(" "),s("li",[t._v("如果操作数是空字符串，则返回 true。")]),t._v(" "),s("li",[t._v("如果操作数是非空字符串，则返回 false。")]),t._v(" "),s("li",[t._v("如果操作数是数值 0，则返回 true。")]),t._v(" "),s("li",[t._v("如果操作数是非 0 数值（包括 Infinity），则返回 false。")]),t._v(" "),s("li",[t._v("如果操作数是 null，则返回 true。")]),t._v(" "),s("li",[t._v("如果操作数是 NaN，则返回 true。")]),t._v(" "),s("li",[t._v("如果操作数是 undefined，则返回 true。")])]),t._v(" "),s("p",[s("strong",[t._v("逻辑非操作符也可以用于把任意值转换为布尔值")]),t._v("。同时使用两个叹号（"),s("code",[t._v("!!")]),t._v("），相当于调用了转型函数 "),s("code",[t._v("Boolean()")])]),t._v(" "),s("h3",{attrs:{id:"逻辑与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑与"}},[t._v("#")]),t._v(" 逻辑与")]),t._v(" "),s("p",[t._v("逻辑与操作符由两个和号（"),s("code",[t._v("&&")]),t._v("）表示，应用到两个值,两个值"),s("strong",[t._v("都真才真")])]),t._v(" "),s("h3",{attrs:{id:"逻辑或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑或"}},[t._v("#")]),t._v(" 逻辑或")]),t._v(" "),s("p",[t._v("逻辑或操作符由两个管道符（||）表示，两个值"),s("strong",[t._v("有真就真")])]),t._v(" "),s("h3",{attrs:{id:"短路运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短路运算"}},[t._v("#")]),t._v(" 短路运算")]),t._v(" "),s("h4",{attrs:{id:"a-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-b"}},[t._v("#")]),t._v(" a&&b")]),t._v(" "),s("ul",[s("li",[t._v("如果 a 是真的，b 的真假决定结果，b 真结果就真，b 假结果就假，所以它的结果就是 b")]),t._v(" "),s("li",[t._v("如果 a 是假的，不用看 b 了，被短路了。结果就是 a")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),s("h4",{attrs:{id:"a-b-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-b-2"}},[t._v("#")]),t._v(" a||b")]),t._v(" "),s("ul",[s("li",[t._v("如果 a 是真的，不用看 b 了，被短路了。结果就是 a")]),t._v(" "),s("li",[t._v("如果 a 是假的，b 的真假决定结果，b 真结果就真，b 假结果就假，所以它的结果就是 b")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("如果出现布尔运算符连续的情况")]),t._v(" "),s("p",[t._v("先计算前面的结果，拿这个结果和后面的进行计算：")]),t._v(" "),s("p",[s("code",[t._v("false || false || 123")]),t._v(" =>123")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDisplayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("WrappedComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" WrappedComponent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("displayName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" WrappedComponent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"乘性操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乘性操作符"}},[t._v("#")]),t._v(" 乘性操作符")]),t._v(" "),s("p",[t._v("ECMAScript 定义了 3 个乘性操作符："),s("strong",[t._v("乘法、除法和取模。")])]),t._v(" "),s("p",[t._v("乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。")]),t._v(" "),s("p",[t._v("除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商")]),t._v(" "),s("h3",{attrs:{id:"取模操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取模操作符"}},[t._v("#")]),t._v(" 取模操作符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("取模操作符用百分号“%″表示")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("a%b")]),t._v("表示求 a 除以 b 的余数，它不关心整数部分，只关心余数")])])]),t._v(" "),s("h2",{attrs:{id:"指数操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指数操作符"}},[t._v("#")]),t._v(" 指数操作符")]),t._v(" "),s("p",[t._v("ECMAScript 7 新增了"),s("code",[t._v("指数操作符")]),t._v("，"),s("code",[t._v("Math.pow()")]),t._v("现在有了自己的操作符"),s("code",[t._v("**")]),t._v("，结果是一样的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n")])])]),s("h2",{attrs:{id:"加性操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加性操作符"}},[t._v("#")]),t._v(" 加性操作符")]),t._v(" "),s("p",[t._v("加性操作符，即加法和减法操作符")]),t._v(" "),s("p",[s("strong",[t._v("加法操作符")]),t._v("有“加法”和“连字符”两种作用,如果加号两边的操作数"),s("strong",[t._v("都是数字")]),t._v("，则为“加法”")]),t._v(" "),s("p",[t._v('如果有一方是字符串的话，加号的作用就是将他们进行拼接,在这种情况下，另一操作数是对象、数值或布尔值，则调用它们的 toString()方法以获取字符串，对于 undefined 和 null ,则调用 String() 函数， 分别获取 "undefined"和"null"')]),t._v(" "),s("p",[t._v("如果加号两边均是布尔值、null 或 undefined，则先在后台使用 Number()将其转换为数值，然后再执行数学运算。如果转换结果是 NaN，则计算的结果是NaN；如果有任一操作数是对象，则调用其 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("valueOf()"),s("OutboundLink")],1),t._v("方法取得表示它的数值。如果该值是 NaN，则计算的结果是 NaN。如果对象没有 valueOf()方法(Math 和 Error 对象没有 valueOf 方法)，则调用其 toString()方法，然后再将得到的字符串转换为数值")]),t._v(" "),s("p",[s("strong",[t._v("减法操作符")]),t._v("，除了基本的数学运算外，只要有一个操作数是字符串、布尔值、null 或 undefined，则先在后台使用 Number()将其转换为数值，然后再执行数学运算。如果转换结果是 NaN，则减法计算的结果是NaN；如果有任一操作数是对象，则调用其 valueOf()方法取得表示它的数值。如果该值是 NaN，则减法计算的结果是 NaN。如果对象没有 valueOf()方法，则调用其 toString()方法，然后再将得到的字符串转换为数值")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("一道NT面试题")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> "aNaN"')]),t._v("\n")])])]),s("p",[s("strong",[t._v("因为 + 'b' 等于 NaN，所以结果为 \"aNaN\"")])])]),t._v(" "),s("h2",{attrs:{id:"关系操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关系操作符"}},[t._v("#")]),t._v(" 关系操作符")]),t._v(" "),s("p",[t._v("关系操作符执行比较两个值的操作，包括小于（"),s("code",[t._v("<")]),t._v("）、大于（"),s("code",[t._v(">")]),t._v("）、小于等于（"),s("code",[t._v("<=")]),t._v("）和大于等于（"),s("code",[t._v(">=")]),t._v("）,这几个操作符都返回布尔值")]),t._v(" "),s("ul",[s("li",[t._v("如果操作数都是数值，则执行数值比较。")]),t._v(" "),s("li",[t._v("如果操作数都是字符串，则逐个比较字符串中对应字符的编码。")]),t._v(" "),s("li",[t._v("如果有任一操作数是数值，则将另一个操作数转换为数值，执行数值比较。")]),t._v(" "),s("li",[t._v("如果有任一操作数是对象，则调用其 valueOf()方法，取得结果后再根据前面的规则执行比较。如果没有 valueOf()操作符，则调用 toString()方法，取得结果后再根据前面的规则执行比较。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[s("strong",[t._v("在以上代码中，因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值。")])]),t._v(" "),s("ul",[s("li",[t._v("如果有任一操作数是布尔值，则将其转换为数值再执行比较。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("js 中没有连比")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ❌")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// √")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"相等操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[t._v("#")]),t._v(" 相等操作符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("两个等号==运算符不比较值的类型，它会进行隐式转换后比较值是否相等")])]),t._v(" "),s("li",[s("p",[t._v("三个等号===运算符，不仅比较值是否相同，也比较类型是否相同,"),s("strong",[t._v("只有两个操作数在不转换的前提下相等才返回 true。")])])])]),t._v(" "),s("p",[s("strong",[t._v("在转换操作数的类型时，"),s("code",[t._v("相等")]),t._v("和"),s("code",[t._v("不相等操作符")]),t._v("遵循如下规则")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("如果任一操作数是布尔值，则将其转换为数值再比较是否相等。"),s("code",[t._v("false")]),t._v(" 转换为 0，"),s("code",[t._v("true")]),t._v("转换为 1。")]),t._v(" "),s("li",[t._v("如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否 相等。")]),t._v(" "),s("li",[t._v("如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再根据前面的规则进行比较。")])]),t._v(" "),s("p",[s("strong",[t._v("在进行比较时，这两个操作符会遵循如下规则")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("null 和 undefined 相等")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("null 和 undefined 不能转换为其他类型的值再进行比较")]),t._v("。")]),t._v(" "),s("li",[t._v("如果有任一操作数是 NaN，则相等操作符返回 false，不相等操作符返回 true。记住：即使两 个操作数都是 NaN，相等操作符也返回 false，因为按照规则，NaN 不等于 NaN。")]),t._v(" "),s("li",[s("strong",[t._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true。否则，两者不相等。")]),t._v("\n全等和不全等操作符与相等和不相等操作符"),s("strong",[t._v("类似，只不过它们在比较相等时不转换操作数")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"条件操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件操作符"}},[t._v("#")]),t._v(" 条件操作符")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("p",[t._v("上面的代码执行了条件赋值操作，即根据条件表达式 b 的值决定将哪个值赋 给变量 a 。如果 b 是 true ，则赋值 1 ；如果 b 是 false，则赋值 2。")]),t._v(" "),s("h2",{attrs:{id:"赋值操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作符"}},[t._v("#")]),t._v(" 赋值操作符")]),t._v(" "),s("p",[t._v("简单赋值用等于号（=）表示，将右手边的值赋给左手边的变量")]),t._v(" "),s("p",[t._v("每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：")]),t._v(" "),s("ul",[s("li",[t._v("乘后赋值（*=）")]),t._v(" "),s("li",[t._v("除后赋值（/=）")]),t._v(" "),s("li",[t._v("取模后赋值（%=）")]),t._v(" "),s("li",[t._v("加后赋值（+=）")]),t._v(" "),s("li",[t._v("减后赋值（-=）")])])])}),[],!1,null,null,null);a.default=e.exports}}]);